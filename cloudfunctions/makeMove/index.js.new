// Integrate AI enhancement into makeMove cloud function
const cloud = require('wx-server-sdk');

// Import the enhanced AI implementation
const aiEnhancement = require('./ai_enhancement');

cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
});

const db = cloud.database();
const gamesCollection = db.collection('games');

// Main function to make a move
exports.main = async (event, context) => {
  try {
    const { fromRow, fromCol, toRow, toCol, gameId } = event;
    
    // Get the game state from database
    const gameDoc = await gamesCollection.doc(gameId).get();
    if (!gameDoc.data) {
      return {
        success: false,
        message: 'Game not found'
      };
    }
    
    const gameState = gameDoc.data;
    
    // Check if game is already over
    if (gameState.game_over) {
      return {
        success: false,
        message: 'Game is already over',
        game: gameState
      };
    }
    
    // Find the piece at the specified position
    const pieceIndex = gameState.pieces.findIndex(p => p.row === fromRow && p.col === fromCol);
    if (pieceIndex === -1) {
      return {
        success: false,
        message: 'No piece at specified position',
        game: gameState
      };
    }
    
    const piece = gameState.pieces[pieceIndex];
    
    // Check if it's this piece's turn
    if (piece.color !== gameState.current_player) {
      return {
        success: false,
        message: 'Not this player\'s turn',
        game: gameState
      };
    }
    
    // Get valid moves for the piece
    const validMoves = getValidMovesForPiece(piece, gameState.pieces);
    
    // Check if the move is valid
    const isValidMove = validMoves.some(move => move[0] === toRow && move[1] === toCol);
    if (!isValidMove) {
      return {
        success: false,
        message: 'Invalid move',
        game: gameState
      };
    }
    
    // Check if the move would leave the player's general in check
    if (wouldBeInCheckAfterMove(piece, toRow, toCol, gameState)) {
      return {
        success: false,
        message: 'Move would leave your general in check',
        game: gameState
      };
    }
    
    // Check if there's a piece at the destination (capture)
    const capturedPieceIndex = gameState.pieces.findIndex(p => p.row === toRow && p.col === toCol);
    if (capturedPieceIndex !== -1) {
      // Remove the captured piece
      gameState.pieces.splice(capturedPieceIndex, 1);
    }
    
    // Move the piece
    piece.row = toRow;
    piece.col = toCol;
    
    // Switch player turn
    gameState.current_player = gameState.current_player === 'red' ? 'black' : 'red';
    
    // Check if the move puts the opponent's general in check or checkmate
    const opponentColor = gameState.current_player;
    const isInCheck = isGeneralInCheck(opponentColor, gameState.pieces);
    
    if (isInCheck) {
      // Check if it's checkmate
      const isCheckmate = isGeneralInCheckmate(opponentColor, gameState.pieces);
      
      if (isCheckmate) {
        gameState.game_over = true;
        gameState.winner = piece.color;
      }
    }
    
    // If AI is enabled and it's AI's turn, make AI move using the enhanced AI
    if (gameState.ai_enabled && gameState.current_player === gameState.ai_color && !gameState.game_over) {
      // Use the enhanced AI implementation
      const aiMove = aiEnhancement.makeAIMove(gameState);
      if (aiMove) {
        const { fromPiece, toRow: aiToRow, toCol: aiToCol } = aiMove;
        
        // Check if there's a piece at the destination (capture)
        const aiCapturedPieceIndex = gameState.pieces.findIndex(p => p.row === aiToRow && p.col === aiToCol);
        if (aiCapturedPieceIndex !== -1) {
          // Remove the captured piece
          gameState.pieces.splice(aiCapturedPieceIndex, 1);
        }
        
        // Move the AI piece
        fromPiece.row = aiToRow;
        fromPiece.col = aiToCol;
        
        // Switch player turn back to human
        gameState.current_player = gameState.current_player === 'red' ? 'black' : 'red';
        
        // Check if the AI move puts the opponent's general in check or checkmate
        const humanColor = gameState.current_player;
        const isHumanInCheck = isGeneralInCheck(humanColor, gameState.pieces);
        
        if (isHumanInCheck) {
          // Check if it's checkmate
          const isHumanCheckmate = isGeneralInCheckmate(humanColor, gameState.pieces);
          
          if (isHumanCheckmate) {
            gameState.game_over = true;
            gameState.winner = gameState.ai_color;
          }
        }
      }
    }
    
    // Update the game state in the database
    await gamesCollection.doc(gameId).update({
      data: gameState
    });
    
    return {
      success: true,
      game: gameState
    };
  } catch (error) {
    console.error('Error making move:', error);
    return {
      success: false,
      message: 'Error making move',
      error: error.message
    };
  }
};

// The rest of the helper functions remain the same as in the original file
// Function to determine if a general is in checkmate
function isGeneralInCheckmate(color, pieces) {
  // Implementation remains the same
}

// Function to determine if a move would leave the player's general in check
function wouldBeInCheckAfterMove(piece, toRow, toCol, gameState) {
  // Implementation remains the same
}

// Function to check if a general is in check
function isGeneralInCheck(color, pieces) {
  // Implementation remains the same
}

// Function to get valid moves for a piece based on its type
function getValidMovesForPiece(piece, allPieces) {
  // Implementation remains the same
}

// Helper functions for move validation
function isOnBoard(row, col) {
  // Implementation remains the same
}

function isOccupiedBySameColor(row, col, color, pieces) {
  // Implementation remains the same
}

function isOccupied(row, col, pieces) {
  // Implementation remains the same
}

function isInPalace(row, col, color) {
  // Implementation remains the same
}

// Implementation of move rules for each piece type
function getGeneralMoves(piece, allPieces) {
  // Implementation remains the same
}

function getAdvisorMoves(piece, allPieces) {
  // Implementation remains the same
}

function getElephantMoves(piece, allPieces) {
  // Implementation remains the same
}

function getHorseMoves(piece, allPieces) {
  // Implementation remains the same
}

function getChariotMoves(piece, allPieces) {
  // Implementation remains the same
}

function getCannonMoves(piece, allPieces) {
  // Implementation remains the same
}

function getSoldierMoves(piece, allPieces) {
  // Implementation remains the same
}
